import 'package:hive/hive.dart';
import 'package:image_picker/image_picker.dart';
import 'package:skilluxfrontendflutter/models/internal_hive_models/post/binary_image.dart';
import 'package:skilluxfrontendflutter/presentations/features/helpers/image_handling/image_converter.dart';
import 'package:logger/logger.dart';

part 'post.g.dart'; // This will be generated by Hive

@HiveType(typeId: 6) // Unique type ID for the Post model
class Post {
  final Logger _logger = Logger();

  @HiveField(0)
  final int? id;

  @HiveField(1)
  final String title;

  @HiveField(2)
  final int? readNumber;

  @HiveField(3)
  final int? votesNumber;

  @HiveField(4)
  final bool? isPublished;

  @HiveField(5)
  final String? headerImageUrl;

  @HiveField(6)
  final List<String> tags;

  @HiveField(7)
  DateTime? createdAt;

  @HiveField(8)
  final DateTime? updatedAt;

  @HiveField(9)
  final int? userId;

  @HiveField(10)
  String content;

  @HiveField(11)
  BinaryImage? headerBinaryImage;

  // For implementation purpose
  XFile? headerImageIMG;

  Post({
    this.id,
    required this.title,
    this.readNumber = 0,
    this.votesNumber = 0,
    this.isPublished = false,
    this.headerImageUrl,
    required this.tags,
    this.createdAt,
    this.updatedAt,
    this.userId,
    this.content = "",
    this.headerImageIMG,
    this.headerBinaryImage,
  });

  factory Post.fromBody(Map<String, dynamic> body) {
    return Post(
      id: body['id'],
      title: body['title'],
      readNumber: body['readNumber'],
      votesNumber: body['votesNumber'],
      isPublished: body['isPublished'],
      headerImageUrl: body['headerImage'],
      tags: List<String>.from(body['tags']),
      createdAt:
          body['createdAt'] != null ? DateTime.parse(body['createdAt']) : null,
      updatedAt:
          body['updatedAt'] != null ? DateTime.parse(body['updatedAt']) : null,
      userId: body['userId'],
      content: body['content'],
      headerImageIMG: null, // Populate this as necessary
    );
  }

  Map<String, dynamic> toBody() {
    return {
      'id': id,
      'title': title,
      'headerImage': headerImageUrl,
      'tags': tags,
      'userId': userId,
      'content': content,
    };
  }

  Future<bool> convertXFileImageToBinary() async {
    try {
      if (headerImageIMG != null) {
        headerBinaryImage ??= BinaryImage();
        headerBinaryImage!.binaryImage =
            await ImageConverter.xFileToUint8List(headerImageIMG);
        headerBinaryImage!.xFileImagePath = headerImageIMG!.path;
        return true;
      }
    } catch (e) {
      _logger.e(e.toString());
    }
    return false;
  }

  Future<bool> convertBinaryToXFileImage() async {
    try {
      if (headerBinaryImage?.binaryImage != null) {
        headerImageIMG = await ImageConverter.uint8ListToXFile(
            headerBinaryImage!.binaryImage!,
            headerBinaryImage!.xFileImagePath!);

        return true;
      }
    } catch (e) {
      _logger.e(e.toString());
    }
    return false;
  }

    Post copyWith({
    int? id,
    String? title,
    int? readNumber,
    int? votesNumber,
    bool? isPublished,
    String? headerImageUrl,
    List<String>? tags,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? userId,
    String? content,
    XFile? headerImageIMG,
    BinaryImage? headerImageBinary,
  }) {
    return Post(
      id: id ?? this.id,
      title: title ?? this.title,
      readNumber: readNumber ?? this.readNumber,
      votesNumber: votesNumber ?? this.votesNumber,
      isPublished: isPublished ?? this.isPublished,
      headerImageUrl: headerImageUrl ?? this.headerImageUrl,
      tags: tags ?? this.tags,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      userId: userId ?? this.userId,
      content: content ?? this.content,
      headerImageIMG: headerImageIMG ?? this.headerImageIMG,
      headerBinaryImage: headerImageBinary ?? headerBinaryImage,
    );
  }

  void dump() {
  _logger.d('Post Dump:');
  _logger.d('ID: $id');
  _logger.d('Title: $title');
  _logger.d('Read Number: $readNumber');
  _logger.d('Votes Number: $votesNumber');
  _logger.d('Is Published: $isPublished');
  _logger.d('Header Image URL: $headerImageUrl');
  _logger.d('Tags: $tags');
  _logger.d('Created At: ${createdAt?.toIso8601String() ?? "Not set"}');
  _logger.d('Updated At: ${updatedAt?.toIso8601String() ?? "Not set"}');
  _logger.d('User ID: $userId');
  _logger.d('Content: $content');
  _logger.d('Header Image (XFile): ${headerImageIMG?.path ?? "Not set"}');
  _logger.d('Header Binary Image: ${headerBinaryImage != null ? "Present" : "Not present"}');
  if (headerBinaryImage != null) {
    _logger.d('  Binary Image Path: ${headerBinaryImage!.xFileImagePath ?? "Not set"}');
    _logger.d('  Binary Image Data: ${headerBinaryImage!.binaryImage != null ? "${headerBinaryImage!.binaryImage!.length} bytes" : "Not set"}');
  }
}
}
